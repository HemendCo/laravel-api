<?php

namespace {{ namespace }};

use {{ namespace }};
use {{ namespacedUserModel }};
use Hemend\Api\Enums\AuthTokenType;
use Illuminate\Contracts\Auth\Authenticatable;

abstract class {{ class }} extends {{ service }}
{
  const VERSION = '{{ version }}';

  protected ?string $token = null;
  protected ?bool $has_access = null;

  /**
   * @return string
   */
  public final function getVersion(): string
  {
    return self::VERSION;
  }

  /**
   * @return boolean
   */
  protected final function authorization(): bool
  {
    try {
      $this->has_access = false;

      if($this->getRequest()->header('X-Token-Type') == AuthTokenType::AccessToken->value && $this->getRequest()->bearerToken()) {
        $user = $this->user();
        if($user &&
          $user->tokenCan(parent::SERVICE) &&
          $user->not_deleted &&
          !$user->blocked &&
          !$user->suspended &&
          $user->activated &&
          $this->user()->hasRoleInService($this->getService()) &&
          $this->user()->can(static::getPermissionName())
        ) {
          $this->token = $this->getRequest()->bearerToken();
          return ($this->has_access = true);
        }
      } else {
        /**
         * @var \App\Models\AclRoles $role
         */
        $role = \App\Models\AclRoles::findById(1); // Public Role
        if($role->hasPermissionTo(static::getPermissionName())) {
          return ($this->has_access = true);
        }
      }
    } catch (\Exception $e) {}

    return false;
  }

  /**
   * @return bool|null
   */
  public final function hasAccess(): ?bool
  {
    return $this->has_access;
  }

  /**
   * @return string|null
   */
  public final function getToken(): ?string
  {
    return $this->token;
  }

  /**
   * @return boolean
   */
  public final function hasIdentity(): bool
  {
    return !!$this->token && !!$this->user();
  }

  /**
   * Get the currently authenticated user.
   *
   * @return Users|Authenticatable|null
   */
  public final function user(): Users|Authenticatable|null
  {
    return $this->auth()->user() ?? null;
  }
}
