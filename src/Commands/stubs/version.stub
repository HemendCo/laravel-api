<?php

namespace {{ namespace }};

use {{ namespace }};

abstract class {{ class }} extends {{ service }}
{
    const VERSION = '{{ version }}';

    protected $token = null;
    protected $has_access = null;

    /**
    * @return string $version
    */
    public final function getVersion()
    {
        return self::VERSION;
    }

    /**
    * @return boolean
    */
    protected final function authorization()
    {
        try {
            $this->has_access = false;

            if($this->getRequest()->bearerToken()) {
                $user = $this->user();
                if($user &&
                    $user->tokenCan(parent::SERVICE) &&
                    $user->not_deleted &&
                    !$user->blocked &&
                    !$user->suspended &&
                    $user->activated &&
                    $this->user()->can(static::getPermissionName())
                ) {
                    $this->token = $this->getRequest()->bearerToken();
                    return ($this->has_access = true);
                }
            } else {
                $role = \App\Models\AclRoles::findById(1); // Public Role
                if($role->hasPermissionTo(static::getPermissionName())) {
                    return ($this->has_access = true);
                }
            }
        } catch (\Exception $e) {}

        return false;
    }

    /**
    * @return boolean
    */
    public final function hasAccess()
    {
        return $this->has_access;
    }

    /**
    * @return boolean
    */
    public final function getToken()
    {
        return $this->token;
    }

    /**
    * @return boolean
    */
    public final function hasIdentity()
    {
        return !!$this->token && !!$this->user();
    }

    /**
    * Get the currently authenticated user.
    *
    * @return \{{ namespacedUserModel }}|null
    */
    public final function user()
    {
        return $this->auth()->user() ?? null;
    }

    /**
     * @return object
     */
    abstract static public function package(): object;
}
