<?php

namespace {{ namespace }};

use {{ namespace }};
use {{ namespacedUserModel }};
use Hemend\Api\Enums\AuthTokenType;
use Illuminate\Contracts\Auth\Authenticatable;

abstract class {{ class }} extends {{ service }}
{
  const VERSION = '{{ version }}';

  protected ?string $token = null;
  protected ?bool $has_authorized = null;
  protected ?bool $has_access = null;

  /**
   * @return string
   */
  public final function getVersion(): string
  {
    return self::VERSION;
  }

  protected final function authorization()
  {
    if($this->has_authorized === null) {
      $this->has_authorized = false;

      try {
        $this->token = $this->getRequest()->bearerToken();
        
        if($this->getRequest()->header('X-Token-Type') == AuthTokenType::AccessToken->value && $this->token) {
          $user = $this->user();
          if($user &&
            $user->tokenCan(parent::SERVICE) &&
            $user->not_deleted &&
            !$user->blocked &&
            !$user->suspended &&
            $user->activated &&
            $this->user()->hasRoleInService($this->getService())
          ) {
            $this->has_authorized = true;
          }
        }
      } catch (\Exception $e) {}
    }

    return $this->has_authorized;
  }

  /**
   * @return bool
   */
  public final function hasAuthorized(): bool
  {
    return !!$this->has_authorized;
  }

  /**
   * @return bool
   */
  public final function hasAccess(): bool
  {
    if($this->has_access === null) {
      $this->has_access = false;

      try {
        if($this->hasIdentity() && $this->user()->can(static::getPermissionName())) {
          $this->has_access = true;
        } else {
          $role = \App\Models\AclRoles::findById(1); // Public Role
          if($role->hasPermissionTo(static::getPermissionName())) {
            $this->has_access = true;
          }
        }
      } catch (\Exception $e) {}
    }

    return $this->has_access;
  }

  /**
   * @return boolean
   */
  public final function hasToken(): bool
  {
    return !!$this->token;
  }

  /**
   * @return string|null
   */
  public final function getToken(): ?string
  {
    return $this->token;
  }

  /**
   * @return boolean
   */
  public final function hasIdentity(): bool
  {
    return !!$this->token && !!$this->user();
  }

  /**
   * Get the currently authenticated user.
   *
   * @return Users|Authenticatable|null
   */
  public final function user(): Users|Authenticatable|null
  {
    return $this->auth()->user() ?? null;
  }
}
