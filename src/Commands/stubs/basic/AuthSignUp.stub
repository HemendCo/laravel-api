<?php

namespace {{ namespace }};

use {{ namespace }};
use App\Http\Controllers\Api\Client\AclTraits;
use App\Models\AclRoles as Roles;
use App\Models\Users;
use App\Models\UsersAuthCodes;
use Hemend\Api\Traits\PassportToken;
use Hemend\Library\Numbers;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Propaganistas\LaravelPhone\PhoneNumber;

class AuthSignUp extends {{ version }}
{
    use PassportToken;
    use AclTraits\Auth;

    static public function title(): string
    {
        return __('Signup');
    }

    static public function permissions(): array
    {
        return [
            'allow' => [
                AuthRoles::class,
            ],
            'deny' => [
            ],
        ];
    }

    public function __invoke()
    {
        if($this->hasIdentity()) {
            return response()->json([
                'status_code' => 'ALREADY_LOGGED_IN',
                'status_message' => __('messages.You have already logged in.')
            ], 400);
        }

        $input = $this->getRequest()->all();

        $validator = Validator::make($input, [
            'role_id' => 'bail|required|numeric|min:1'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status_code' => 'ROLE_ID_INVALID',
                'status_message' => __('messages.The role id is invalid')
            ], 400);
        }

        foreach (['mobile', 'hash', 'code'] as $key) {
            if(isset($input[$key]) && is_scalar($input[$key])) {
                $input[$key] = Numbers::persianToLatin($input[$key]);
            }
        }

        if(isset($input['mobile'])) {
            $input['mobile_number'] = $input['mobile'];
            unset($input['mobile']);
        }

        $validator = Validator::make($input, [
            'mobile_number' => 'bail|required|numeric|min:11|phone:IR,mobile',
        ]);

        if($validator->fails()) {
            return response()->json([
                'status_code' => 'MOBILE_NUMBER_INVALID',
                'status_message' => __('messages.The mobile number invalid')
            ], 400);
        }

        $mobile = PhoneNumber::make($input['mobile_number'], 'IR')->formatForMobileDialingInCountry('IR');

        $validator = Validator::make($input, [
            'hash' => 'bail|required|string|min:10|max:10',
        ]);

        if($validator->fails()) {
            return response()->json([
                'status_code' => 'HASH_INVALID',
                'status_message' => __('messages.The hash invalid')
            ], 400);
        }

        $validator = Validator::make($input, [
            'code' => 'bail|required|digits:4'
        ]);

        if($validator->fails()) {
            return response()->json([
                'status_code' => 'CODE_INVALID',
                'status_message' => __('messages.The validation code invalid')
            ], 400);
        }

        $last_auth_code = UsersAuthCodes::where('mobile', $mobile)
            ->where('service', parent::SERVICE)
            ->where('code', $input['code'])
            ->where('hash', $input['hash'])
            ->whereNull('used_at')
            ->first(['id', 'created_at']);

        if(!$last_auth_code) {
            return response()->json([
                'status_code' => 'AUTH_INFO_INCORRECT',
                'status_message' => __('messages.Authentication information is incorrect.')
            ], 401);
        }

        if(strtotime($last_auth_code->created_at) < strtotime('-3 minute')) {
            return response()->json([
                'status_code' => 'CODE_EXPIRED',
                'status_message' => __('messages.The validation code has expired.')
            ], 401);
        }

        $validator = Validator::make($input, [
            'role_id' => [
                Rule::exists(app(Roles::class)->getTable(), 'id')->where(function($query) {
                    $query->whereNotIn('id', [1, 2]);
                    $query->where('activated', 1);
                    $query->where('is_default', 1);
                })
            ]
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status_code' => 'ROLE_ID_INVALID',
                'status_message' => __('messages.The role id is invalid')
            ], 400);
        }

        $user = Users::where('mobile', $mobile)->where('status', '>=', '0')->first();

        if($user) {
            return response()->json([
                'status_code' => 'MOBILE_NUMBER_OCCUPIED',
                'status_message' => __('messages.The validation code is valid but the given phone number has already been registered.')
            ], 401);
        }

        UsersAuthCodes::where('id', $last_auth_code->id)
            ->update([
                'used_at' => date('Y-m-d H:i:s'),
            ]);
        
        $role = Roles::select('name')
            ->where('id', request()->input('role_id'))
            ->first();

        $user = Users::create([
            'activated' => '1',
            'mobile' => $mobile,
        ]);
        
        $user->assignRole($role->name);

        $token = $this->getBearerTokenByUser($user, [parent::SERVICE]);
        $expiration = Carbon::now()->addSeconds($token['expires_in']);

        return response()->json([
            'status_code' => 'OK',
            'token' => [
                'token_type' => $token['token_type'],
                'expires_in' => $expiration,
                'access_token' => $token['access_token'],
                'refresh_token' => $token['refresh_token'],
            ],
            'user' => $user
        ]);
    }
}
