<?php

namespace {{ namespace }};

use {{ version_namespace }};
use App\Models\Users;
use Hemend\Api\Enums\AuthTokenType;
use Hemend\Api\Interfaces\Endpoint;
use Hemend\Api\Traits\PassportToken;
// use Illuminate\Support\Carbon;

class RefreshToken extends {{ version }} implements Endpoint
{
    use PassportToken;

    static public function defaultPermissionFlag()
    {
        return self::PERMISSION_FLAG_PUBLIC;
    }

    static public function title(): string
    {
        return __('hemend.Refresh token');
    }

    public function __invoke()
    {
        if($this->getRequest()->header('X-Token-Type') != AuthTokenType::RefreshToken->value || !$this->hasToken()) {
            return response()->json([
                'status_code' => 'REFRESH_TOKEN_INVALID',
                'status_message' => __('hemend.The refresh token invalid')
            ], 400);
        }

        try {
            $authTokens = $this->regenerateBearerTokenByRefreshToken($this->getToken());
            $userId = $authTokens['passport_token']['access_token']->getUserIdentifier();

            $user = Users::query()
              ->where('id', $userId)
              ->where('not_deleted', '1')
              ->first();

            if(!$user || $user->blocked || $user->suspended || !$user->activated || !$user->hasRoleInService($this->getService())) {
              return response()->json([
                'status_code' => 'ACCESS_DENIED',
                'status_message' => __('hemend.You do not have access to sign in.')
              ], 403);
            }

            $token = $authTokens['token'];
            // $expiration = Carbon::now()->addSeconds($token['expires_in']);
            $expiration = $authTokens['passport_token']['refresh_token']->getExpiryDateTime()->format('Y-m-d\TH:i:s.u\Z');

            return response()->json([
                'status_code' => 'OK',
                'data' => [
                    'token_type' => $token['token_type'],
                    'expires_in' => $expiration,
                    'access_token' => $token['access_token'],
                    'refresh_token' => $token['refresh_token'],
                ],
            ]);
        } catch (\Throwable $e) {
            return response()->json([
                'status_code' => 'REFRESH_TOKEN_INVALID',
                'status_message' => __('hemend.The refresh token invalid')
            ], 400);
        }
    }
}
