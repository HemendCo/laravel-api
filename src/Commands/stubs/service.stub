<?php

namespace {{ namespace }};

use Illuminate\Http\Request;
use Laravel\Passport\Passport;

abstract class {{ class }}
{
    const GUARD = 'api';
    const SERVICE = '{{ class }}';

    /**
    * @var Request $request
    */
    protected Request $request;

    public final function __construct(Request $request)
    {
        $this->setRequest($request);
        $this->setPassportConfig();
        $this->authorization();
    }

    /**
    * @return string $service
    */
    protected final function getService()
    {
        return self::SERVICE;
    }

    /**
    * @return Request
    */
    protected final function getRequest()
    {
        return $this->request;
    }

    /**
    * @param Request $request
    * @return self
    */
    private function setRequest(Request $request)
    {
        $this->request = $request;
        return $this;
    }

    /**
    * Get the available auth instance.
    *
    * @return \Illuminate\Contracts\Auth\Factory|\Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard
    */
    public final function auth()
    {
        return auth(self::GUARD);
    }

    /**
    * @return void
    */
    protected final function setPassportConfig()
    {
        Passport::tokensCan([
            self::SERVICE => self::SERVICE . ' scope',
        ]);

        Passport::setDefaultScope([
            self::SERVICE
        ]);

        Passport::tokensExpireIn(now()->addDays(15));
        Passport::refreshTokensExpireIn(now()->addDays(30));
        Passport::personalAccessTokensExpireIn(now()->addMonths(6));

        return $this;
    }

    static public final function getPermissionName($name=null)
    {
        if($name) {
            return self::SERVICE . $name;
        }
        // $action = get_class($this);
        $action = static::class;
        $permission = substr($action, (strrpos($action, '\\')) + 1);

        return self::SERVICE . $permission;
    }

    /**
    * @return boolean
    */
    abstract protected function authorization();
}
