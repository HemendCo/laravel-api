<?php

namespace {{ namespace }};

use App\Models\AclServices;
use Hemend\Api\Libraries\Service;
use Illuminate\Contracts\Auth\Factory;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Contracts\Auth\StatefulGuard;
use Illuminate\Http\Request;
use Laravel\Passport\Passport;

abstract class {{ class }} extends Service
{
    const GUARD = '{{ guard }}';
    const SERVICE = '{{ class }}';

    static private ?AclServices $service = null;

    /**
    * @var Request $request
    */
    protected Request $request;

    public final function __construct(Request $request)
    {
        $this->setRequest($request);
        $this->setPassportConfig();
        $this->authorization();
    }

    /**
    * @return string $service
    */
    protected final function getService(): string
    {
        return self::SERVICE;
    }

    /**
    * @return Request
    */
    protected final function getRequest(): Request
    {
        return $this->request;
    }

    /**
    * @param Request $request
    * @return void
    */
    private function setRequest(Request $request): void
    {
        $this->request = $request;
    }

    /**
    * Get the available auth instance.
    *
    * @return Factory|Guard|StatefulGuard
    */
    public final function auth(): Guard|StatefulGuard|Factory
    {
        return auth(self::GUARD);
    }

    /**
    * @return void
    */
    protected final function setPassportConfig()
    {
        Passport::tokensCan([
            self::SERVICE => self::SERVICE . ' scope',
        ]);

        Passport::setDefaultScope([
            self::SERVICE
        ]);

        Passport::tokensExpireIn(now()->addHours(1));
        Passport::refreshTokensExpireIn(now()->addDays(7));
        Passport::personalAccessTokensExpireIn(now()->addMonths(6));
    }

    static public final function getPermissionName($name=null): string
    {
        if($name != null) {
            return self::SERVICE . $name;
        }
        $prefix = 'App\Http\Controllers\Api\\';

        $endpoint_untidy = preg_replace('#^' . preg_quote($prefix) . '#', '', static::class);

        $permission_untidy = array_slice(explode('\\', $endpoint_untidy), 2, 4, true);
        $permission = implode('.', $permission_untidy);

        return self::SERVICE . '.' . $permission;
    }

    /**
     * @return ?AclServices
     */
    static public final function service(): ?AclServices
    {
        if(self::$service === null) {
            self::$service = AclServices::query()
                ->where('name', self::SERVICE)
                ->first();
        }

        return self::$service;
    }

    abstract protected function authorization();

    /**
    * @return boolean
    */
    abstract protected function hasAuthorized(): bool;

    /**
    * @return boolean
    */
    abstract protected function hasAccess(): bool;
}
