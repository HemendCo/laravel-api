<?php

namespace {{ namespace }};

use {{ version_namespace }};
use App\Models\AclRoles as Roles;
use App\Models\AclPermissions as Permissions;
use Hemend\Api\Interfaces\Endpoint;
use Illuminate\Support\Facades\Validator;

class RevokePermission extends {{ version }} implements Endpoint
{
    static public function title(): string
    {
        return __('hemend.Permission revoke');
    }

    public function __invoke()
    {
        $input = $this->getRequest()->all();

        $validator = Validator::make($input, [
            'role_id' => 'bail|required|numeric|min:1'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status_code' => 'ROLE_ID_INVALID',
                'status_message' => __('hemend.The role id is invalid')
            ], 400);
        }

        $validator = Validator::make($input, [
            'permission_id' => 'bail|required|numeric|min:1'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status_code' => 'PERMISSION_ID_INVALID',
                'status_message' => __('hemend.The permission id is invalid')
            ], 400);
        }

        $role = Roles::where('id', request()->input('role_id'))->first();

        if (!$role) {
            return response()->json([
                'status_code' => 'ROLE_ID_INVALID',
                'status_message' => __('hemend.The role id is invalid')
            ], 409);
        }

        $permission = Permissions::where('id', request()->input('permission_id'))->first();

        if (!$permission) {
            return response()->json([
                'status_code' => 'PERMISSION_ID_INVALID',
                'status_message' => __('hemend.The permission id is invalid')
            ], 409);
        }

        if(!$role->hasPermissionTo($permission->name)) {
            return response()->json([
                'status_code' => 'PERMISSION_NOT_GIVEN',
                'status_message' => __('hemend.Permission was not given')
            ], 409);
        }

        $role->revokePermissionTo($permission->name);

        return response()->json([
            'status_code' => 'OK',
        ]);
    }
}
